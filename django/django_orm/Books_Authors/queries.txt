>>> from books_authors_app.models import Book, Author
>>> csharp = Book.objects.create(title="C Sharp", desc="Learn C Sharp from zero to hero") 
>>> java = Book.objects.create(title="Java", desc="Learn Java from zero to hero")         
>>> python = Book.objects.create(title="Python", desc="Learn Python from zero to hero")   
>>> php = Book.objects.create(title="PHP", desc="Learn PHP from zero to hero")            
>>> ruby = Book.objects.create(title="Ruby", desc="Learn Ruby from zero to hero")         
>>> jane = Author.objects.create(first_name="Jane", last_name="Austen")                   
>>> emily = Author.objects.create(first_name="Emily", last_name="Dickinson") 
>>> fyodor = Author.objects.create(first_name="Fyodor", last_name="Dostoevsky") 
>>> william = Author.objects.create(first_name="William", last_name="Shakespeare") 
>>> lau = Author.objects.create(first_name="Lau", last_name="Tzu") 

>>> from books_authors_app.models import Book, Author
>>> book_to_update = Book.objects.get(title="C Sharp")
>>> book_to_update.title = "C#"
>>> book_to_update.save()

>>> all_authors = Author.objects.all()
>>> all_authors.values()
<QuerySet [{'id': 1, 'first_name': 'Jane', 'last_name': 'Austen', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc)}, {'id': 2, 'first_name': 'Emily', 'last_name': 'Dickinson', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 36, 40, 142699, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 36, 40, 142699, tzinfo=datetime.timezone.utc)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevsky', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 37, 22, 567077, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 37, 22, 567077, tzinfo=datetime.timezone.utc)}, {'id': 4, 'first_name': 'William', 'last_name': 'Shakespeare', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc)}, {'id': 5, 'first_name': 'Lau', 'last_name': 'Tzu', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 38, 
34, 247199, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 38, 34, 247199, tzinfo=datetime.timezone.utc)}]>
>>> all_authors[3].__dict__ 
{'_state': <django.db.models.base.ModelState object at 0x00000210C1337D10>, 'id': 4, 'first_name': 'William', 'last_name': 'Shakespeare', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc)}
>>> all_authors[3].first_name="Bill"
>>> all_authors[3].save()
# Above didn't works
>>> all_authors[3].__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000210C133CE10>, 'id': 4, 'first_name': 'William', 'last_name': 'Shakespeare', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 56, 56, 880053, tzinfo=datetime.timezone.utc)}
>>> author_to_update = all_authors[3]
>>> author_to_update.first_name = "Bill"
>>> author_to_update.save()

>>> first_author = Author.objects.first()
>>> first_author.__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000210C133E810>, 'id': 1, 'first_name': 'Jane', 'last_name': 'Austen', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc)}
>>> first_book = Book.objects.first()
>>> second_book = Book.objects.get(id=first_book.id+1) 
>>> first_book.__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000210C133F150>, 'id': 1, 'title': 'C#', 'desc': 'Learn C Sharp from zero to hero', 'created_at': datetime.datetime(2023, 8, 20, 17, 31, 55, 739619, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 50, 39, 735009, tzinfo=datetime.timezone.utc)}
>>> second_book.__dict__
{'_state': <django.db.models.base.ModelState object at 0x00000210C133F650>, 'id': 2, 'title': 'Java', 'desc': 'Learn Java from zero to hero', 'created_at': datetime.datetime(2023, 8, 20, 17, 32, 35, 454261, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 32, 35, 454261, tzinfo=datetime.timezone.utc)}
>>> first_book.authors.add(first_author) 
>>> second_book.authors.add(first_author)

In [1]: from books_authors_app.models import Book, Author

In [2]: first_book = Book.objects.first()

In [3]: second_book = Book.objects.get(id=first_book.id+1)

In [4]: third_book = Book.objects.get(id=3)

In [5]: forth_book = Book.objects.get(id=4)

In [6]: third_author = Author.objects.get(id=3)

In [7]: first_book.authors.add(third_author)

In [8]: third_book.authors.add(third_author)

In [9]: forth_book.authors.add(third_author)

In [10]: first_book.authors.all()
Out[10]: <QuerySet [<Author: Author object (1)>, <Author: Author object (3)>]>

In [11]: first_book.authors.all().__dict__
Out[11]: 
{'model': books_authors_app.models.Author,
 '_db': None,
 '_hints': {'instance': <Book: Book object (1)>},
 '_query': <django.db.models.sql.query.Query at 0x18de7c60950>,
 '_result_cache': None,
 '_sticky_filter': False,
 '_for_write': False,
 '_prefetch_related_lookups': (),
 '_prefetch_done': False,
 '_known_related_objects': {},
 '_iterable_class': django.db.models.query.ModelIterable,
 '_fields': None,
 '_defer_next_filter': False,
 '_deferred_filter': (False, (), {'books__id': 1})}

In [12]: first_book.authors.all().values()
Out[12]: <QuerySet [{'id': 1, 'first_name': 'Jane', 'last_name': 'Austen', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc), 'updated_at': 
datetime.datetime(2023, 8, 20, 17, 35, 59, 558649, tzinfo=datetime.timezone.utc)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevsky', 'notes': '', 'created_at': datetime.datetime(2023, 8, 
20, 17, 37, 22, 567077, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 17, 37, 22, 567077, tzinfo=datetime.timezone.utc)}]>

In [13]: fifth_book = Book.objects.get(id=5)

In [15]: fourth_author = Author.objects.get(id=4)

In [16]: all_books = Book.objects.all()

In [19]: for book in all_books:
    ...:     book.authors.add(fourth_author)
    ...:

In [20]: third_book.authors.all()
Out[20]: <QuerySet [<Author: Author object (3)>, <Author: Author object (4)>]>

In [22]: first_author_of_third_book = third_book.authors.first()

In [23]: first_author_of_third_book.delete()
Out[23]: (4, {'books_authors_app.Author_books': 3, 'books_authors_app.Author': 1})

In [24]: fifth_author = Author.objects.get(id=5)

In [25]: second_book.authors.add(fifth_author)

In [27]: Book.objects.filter(authors=third_author)
Out[27]: <QuerySet []>

In [28]: third_author_books = Book.objects.filter(authors=third_author)

In [29]: third_author_books.values()
Out[29]: <QuerySet []>

In [34]: Author.objects.filter(books=fifth_book)
Out[34]: <QuerySet [<Author: Author object (4)>]>

In [35]: Author.objects.filter(books=fifth_book).values()
Out[35]: <QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'notes': '', 'created_at': datetime.datetime(2023, 8, 20, 17, 38, 6, 871030, tzinfo=datetime.timezone.utc), 'updated_at': datetime.datetime(2023, 8, 20, 18, 0, 48, 32237, tzinfo=datetime.timezone.utc)}]>